회원가입 구현
	[1] 회원가입 DB 설계 ( 강의 카톡방 SQL 사용 )
	[2] MemberDto 클래스 (롬복 사용)
	[3] MemberController 에서 회원가입 메소드  구현 ( HTTP 매핑 테스트 )
		회원가입 REST : POST , /member/signup
		받기/요청 : 아이디 , 비밀번호 , 이름 , 이메일 , 연락처
		주고/응답 : boolean : true/false
	[4] MemberService 에서 회원가입 메소드 구현 ( SpringMvc 빈 사용 )
	[5] MemberDao 에서  회원가입 메소드 구현
	===============================
	[6] Talend API 테스트 진행
	===============================
	[7] JS 에서 AJAX 이용한 회원가입 구현
		- 성공시 '회원가입성공' alert 출력 후 로그인페이지로 이동
		- 실패시 '회원가입실패' alert 출력
로그인 구현
    [1] MemberController 에서 로그인 메소드  구현 ( HTTP 매핑 테스트 )
		회원가입 REST : POST , /member/login
		받기/요청 : 아이디 , 비밀번호
		주고/응답 : boolean
	[2] MemberService 에서 로그인 메소드 구현 ( SpringMvc 빈 사용 )
	[3] MemberDao 에서  로그인 메소드 구현
	===============================
	[4] Talend API 테스트 진행
    ===============================
    [5] HTML · JS 에서 AJAX 이용한 회원가입 구현
        - 성공시 '로그인 성공' alert 출력 후 메인페이지 이동
        - 실패시 '로그인 실패' alert 출력

내정보 페이지 구현
    - 현재 로그인된 회원의 모든 정보(비밀번호제외) 출력
    [1] MemberController 에서 내정보 메소드  구현
        마이페이지 REST : GET , /member/my/info
        받기/요청 : x
        주고/응답 : memberDto
        * 로그인 세션 활용
    [2] MemberService 에서 내정보 메소드 구현
    [3] MemberDao 에서  내정보 메소드 구현
    ===============================
    [4] templates --> member 폴더내 myinfo.html
    [5] ViewController 에서 해당 템플릿 매핑
        마이페이지 VIEW GET /member/mypage
    [6] header.html 에서 <a> 링크 연결
        <li> <a href="/member/mypage"> 내정보 </a> </li>
    [7] HTML · JS 에서 AJAX 이용한 회원가입 구현
        - 성공시 '로그인 성공' alert 출력 후 메인페이지 이동
        - 실패시 '로그인 실패' alert 출력
=========================================> 어제코드+오늘코드 ==> 카톡 링크 제출
아이디 중복검사 구현
    - 회원가입시 입력한 아이디가 기존 회원들이 사용중인지 아닌지 검사.
    [1] MemberController 에서 아이디 중복검사  구현
        마이페이지 REST : GET , /member/idcheck
        받기/요청 : 입력받은 아이디
        주고/응답 : true : 중복 상태 , false : 중복이 아닌 상태
    [2] MemberService 에서 내정보 메소드 구현
    [3] MemberDao 에서  내정보 메소드 구현
	===============================
	[4] Talend API 테스트 진행
    ===============================
    [5] HTML · JS 에서 AJAX 이용한 회원가입 구현
        - 성공시 '로그인 성공' alert 출력 후 메인페이지 이동
        - 실패시 '로그인 실패' alert 출력

인증 번호 요청 구현
    [1] AuthController 에서 인증 번호 요청  구현
        REST URL : GET , /auth/code
        받기/요청 : 입력받은 이메일
        주고/응답 : boolean( true:인증번호생성 , false:인증번호생성실패)
    [2] AuthService 에서 인증 번호 요청  구현
        - 숫자형식의 난수 6자리 생성
        - 인증번호(난수) 세션처리
    ===============================
    [3] Talend API 테스트 진행
    ===============================

인증 번호 인증 구현
    [1] AuthController 에서 인증 번호 인증  구현
        REST URL : POST , /auth/check
        받기/요청 : 입력받은 인증코드
        주고/응답 : boolean( true:인증성공 , false : 인증실패 )
    [2] AuthService 에서 인증 번호 요청  구현
        - 요청시 생성된 인증번호 와 비교
    ===============================
    [3] Talend API 테스트 진행
    ===============================
수정 페이지 구현
    조건1 : 현재 로그인된 회원정보를 보여주고(비밀번호제외) 새로운 정보로 수정할수 있도록 구현
    조건2 : 이름 , 비밀번호 , 전화번호 수정 가능하도록 구현
        이름 <input />
        기존비밀번호 <input />
        새로운비밀번호 <input />
        전화번호 <input />
    조건3 : 비밀번호 수정시에는 기존 비밀번호도 입력받아 일치시에만 새로운 비밀번호로 구현

탈퇴 페이지 구현
    조건 : 비밀번호를 입력받아 현재로그인된 회원의 비밀번호와 입력한 비밀번호가 일치하면 회원 탈퇴 구현

=================================== 공통 ===============
1. HTML(타임리프) 파일 생성
    - 상황에 따라 HTML 작성
2. HTML(타임리프) 매핑 주소 정의
    - 템플릿(타임리프)를 반환해주는 매핑 주소를 controller 정의
3.  <a> , location.href 를 이용한 페이지 이동
========================================================
탈퇴
    1. 클라이언트로 부터 무엇을 입력 받을지 생각.
        <input class="pwConfirm" type="text"/>
    2. 클릭 이벤트 처리
        <button onclick="doLeave()" type="button">확인</button>
    3.
    [1] MemberController 에서 탈퇴  구현
        REST : Delete , /member/leave
        받기/요청 : 입력받은 비밀번호
        주고/응답 : true : 탈퇴 성공 , false : 탈퇴 실패

    [2] MemberService 에서 탈퇴 구현
        - 현재 로그인된 회원의 회원번호 추출

    [3] MemberDao 에서  탈퇴 구현

	===============================
	[4] Talend API 테스트 진행
    ===============================
    [5] HTML · JS 에서 AJAX 이용한 탈퇴 구현
        - 성공시 '탈퇴 성공' alert 출력 후 로그아웃
        - 실패시 '탈퇴 실패' alert 출력



페이지 요청 기획( 네이버 주식 종목 게시판 참고 )
    1. 글 쓰기 페이지 요청 , 글 전체 페이지에서 글쓰기 클릭했을때
        - 현재 로그인이 안된 상태이면 로그인페이지로 이동
    2. 글 전체 페이지 요청 , 헤더에서 게시판 <a> 클릭했을때.
    3. 글 상세 페이지 요청 , 글 전체 페이지에서 글 제목을 클릭했을때
        - 현재 로그인된 회원이 현재 작성한 글이면 [삭제] , [수정] 활성화 하기
    4. 글 수정 페이지 요청 , 글 상세 페이지에서 글 수정 버튼을 클릭했을때
기능구현 기획
    1. 글 쓰기 처리
        1. 입력사항 : bcno(select) , btitle , bcontent
        2. 현재 로그인된 회원만 글쓰기 가능( 회원제 ) , 회원번호( loginNo )
    2. 글 전체 호출 처리
        1. 출력사항 : 게시물번호 , 제목 , 작성자(id) , 작성일 , 조회수
    3. 글 상세 호출 처리
        1. 출력사항 : 카테고리명 , 게시물번호, 제목 , 내용 , 작성자(id) , 작성일 , 조회수
        2. 게시물식별번호 : 쿼리스트링 활용 , tj_2024A_front/day19/view.js 참고
    4. 글 수정 처리
        1. 현재 로그인된 회원이 작성한 글이면 수정가능( 회원제 )
        2. 수정사항 : title , bcontent , bcno(select)
        3. 게시물식별번호 : 쿼리스트링 활용
    5. 글 삭제 처리
        1. 현재 로그인된 회원이 작성한 글이면 삭제가능( 회원제 )
        2. 게시물식별번호 : 쿼리스트링 이용
    6. 카테고리 전체 호출 처리 , 쓰기/수정 페이지 에서 bcno(select) 를 아래와 같은 형식으로 출력하기 위해서
        <select>
            <option value="1">자유</option>
            <option value="2">자유</option>
            <option value="3">판매</option>
            <option value="4">구매</option>
        </select>
1. DB 설계
2. MVC 설계 , DTO , DAO 클래스 설계
    1. BoardDao
    2. BoardDto , bcategory DTO 없음
    3. BoardService
    4. BoardController
3. rest api 명세서
--------------- 작업순서 예시
1. 규칙
    - 개발순서에서 전 순서가 완성되기 전까지 순서 단계 진행 불가
    - 백엔드, 프론트 담당 대화 불가
    - 명세서 담당 : 진행하면서 변경된 명세서 수정
    - 강의 프로젝트 내에서 진행 : BoardDao, BoardDto , BoardService , BoardController 파일 만 사용.
        - 그외 DTO 필요시 컬렉션 프레임워크 사용.

2.
                        front                       back                                               명세서
글 전체 페이지 요청        HTML , 링크연결              viewController 매핑                               확인,수정
글 쓰기 페이지 요청        HTML , 링크연결              viewController 매핑                               확인,수정
글 상세 페이지 요청       HTML , 링크연결              viewController 매핑                                확인,수정
글 수정 페이지 요청	    HTML , 링크연결              viewController 매핑                                확인,수정
카테고리 호출             쓰기 , 수정 JS(AJAX)        BoardController , boardservice , boardDao           확인,수정
글쓰기 처리              쓰기 JS(AJAX)               BoardController , boardservice , boardDao             확인,수정
글 전체 호출 처리
글 상세 호출 처리
글 수정 처리
글 삭제 처리





<<게시판 구현>> ,
    1. HTML 샘플 과 controller 매핑
    2. 전체 카테고리 기능
        2-1 : 호출 REST 구현
        2-2 : 호출 JS 구현
    3. 글쓰기 기능
        3-1 : 글쓰기 REST 구현
        3-2 : 글쓰기 JS 구현
        3-3 : 첨부파일 업로드 처리 구현



- 오늘 수업 코드 실행 , 카테고리 출력 , 글쓰기(파일업로드)
    + 전체 출력 , 상세 출력 구현 ==> 각자 카카오톡 링크 제출
    - 6시까지 못하면 구현 한것까지만 만으로 모두 제출 해주세요.
































